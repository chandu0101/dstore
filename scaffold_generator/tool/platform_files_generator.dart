import 'dart:async';
import 'dart:convert';
import 'dart:io';

abstract class PlatFormFilesGenerator {
  static Future<void> generate() async {
    try {
      final map = <String, Map<String, dynamic>>{};
      final platforms = ["android", "ios", "web", "macos"];
      await Future.wait(platforms.map((p) async {
        map[p] = (await getPlatformMap(p)).toJson();
      }));

      final content = jsonEncode(map);

      final result = """
       // This file is autogenerated on ${DateTime.now()} dont modify directly 

       final Map<String,Map<String,dynamic>> platformsSourceCode = $content;
      
      """;
      await File("./lib/platforms_source.dart").writeAsString(result);
    } catch (e, st) {
      print("Exception in generating platform source files $e");
      print(st);
    }
  }

  static Future<DirectoryAndFiels> getPlatformMap(String name) async {
    return await getDirectoryFiles(Directory("./$name"));
  }

  static Future<DirectoryAndFiels> getDirectoryFiles(Directory dir) async {
    final completer = Completer<dynamic>();
    final map = <String, String>{};
    final dirPath = dir.path;
    final name = dirPath.split("/").last;
    final subfolders = <DirectoryAndFiels>[];
    dir.list().listen((event) async {
      if (event is File) {
        final content = await event.readAsBytes();
        map[event.path.substring(2)] = base64Encode(content);
      } else if (event is Directory) {
        final dresult = await getDirectoryFiles(event);
        subfolders.add(dresult);
      }
    }, onDone: () {
      completer.complete();
    });
    await completer.future;
    return DirectoryAndFiels(name: name, files: map, subfolders: subfolders);
  }
}

class DirectoryAndFiels {
  final String name;
  final Map<String, String> files;
  final List<DirectoryAndFiels> subfolders;

  DirectoryAndFiels(
      {required this.name, required this.files, required this.subfolders});

  Map<String, dynamic> toJson() {
    final result = <String, dynamic>{};
    result["name"] = name;
    result["files"] = files;
    result["subfolders"] = subfolders.map((e) => e.toJson()).toList();
    return result;
  }

  DirectoryAndFiels copyWith({
    String? name,
    Map<String, String>? files,
    List<DirectoryAndFiels>? subfolders,
  }) {
    return DirectoryAndFiels(
      name: name ?? this.name,
      files: files ?? this.files,
      subfolders: subfolders ?? this.subfolders,
    );
  }
}
